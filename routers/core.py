from aiogram.dispatcher.router import Router
from aiogram import F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import *

from create_bot import logger, bot
from keyboards import core as keyboards

from logic.core import *


router = Router(name='core')


@router.message(CommandStart())
async def message_start(message: Message, state: FSMContext):
    user = message.from_user
    update_user(user)

    data = await state.get_data()
    for key in data.keys():
        try: 
            if 'id' in key: 
                await bot.delete_message(user.id, data[key])
        except: pass
    await state.set_data({})
    await state.clear()


    await message.answer(
        text=(f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}\n'
        '–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å '
        '–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –º—É–∑—ã–∫–∏ –≤ –≤–∏–¥–µ –∫—Ä—É–∂–∫–∞ —Å '
        '–ø–ª–∞—Å—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–ª—å–±–æ–º!'
        ),
        reply_markup=keyboards.start()
    )
    logger.info(f'@{user.username} started bot')


@router.callback_query(F.data == 'start')
async def query_start(query: CallbackQuery, state: FSMContext):
    user = query.from_user
    update_user(user)

    data = await state.get_data()
    for key in data.keys():
        try:
            if 'id' in key:
                await bot.delete_message(user.id, data[key])
        except: pass

    try:
        await query.message.delete()
    except: pass
    await query.message.answer(
        text=(f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}\n'
              '–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å '
              '–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –º—É–∑—ã–∫–∏ –≤ –≤–∏–¥–µ –∫—Ä—É–∂–∫–∞ —Å '
              '–ø–ª–∞—Å—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–ª—å–±–æ–º!'
              ),
        reply_markup=keyboards.start()
    )

    await state.set_data({})
    await state.clear()

    logger.info(f'@{user.username} called start')


@router.callback_query(F.data == 'profile')
async def query_profile(query: CallbackQuery):
    user = query.from_user
    update_user(user)

    pd = get_profile_data(user)
    await query.message.edit_text(
        text=(
            '–ü—Ä–æ—Ñ–∏–ª—å\n' +
            f'–ü–æ–¥–ø–∏—Å–∫–∞ {"‚úÖ" if pd.subscribed else "‚ùå"}\n' +
            (f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {pd.expires_at}\n" if pd.subscribed else "") + 
            '\n' +
            f'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞—Å—Ç–∏–Ω–æ–∫: {pd.free_vinyl}\n' +
            f'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤: {pd.free_albums}\n'
        ),
        reply_markup=keyboards.profile()
    )
    await query.answer()
    logger.info(f'@{user.username} called profile')


@router.callback_query(F.data == 'language')
async def query_language(query: CallbackQuery):
    user = query.from_user
    update_user(user)

    await query.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
        reply_markup=keyboards.language()
    )
    await query.answer()
    logger.info(f'@{user.username} called language')


@router.callback_query(F.data.startswith('language_'))
async def query_language_set(query: CallbackQuery):
    user = query.from_user
    update_user(user)

    
    lang = set_language(user, query.data.replace('language_', ''))
    if lang == LangTypes.RU: answer_text = "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üá∑üá∫"
    else: answer_text = "Language set üá∫üá∏"

    pd = get_profile_data(user)
    await query.message.edit_text(
        text=(
            '–ü—Ä–æ—Ñ–∏–ª—å\n' +
            f'–ü–æ–¥–ø–∏—Å–∫–∞ {"‚úÖ" if pd.subscribed else "‚ùå"}\n' +
            (f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {pd.expires_at}\n" if pd.subscribed else "") + 
            '\n' +
            f'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞—Å—Ç–∏–Ω–æ–∫: {pd.free_vinyl}\n' +
            f'–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤: {pd.free_albums}\n'
        ),
        reply_markup=keyboards.profile()
    )

    await query.answer(answer_text)
    logger.info(f'@{user.username} set language to "{lang.value.upper()}"')
