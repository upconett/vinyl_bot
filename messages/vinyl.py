from database.models.User import LangTypes


def create_vinyl(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∞—É–¥–∏–æ'
        case LangTypes.EN:
            return 'Send me audio'


def no_free_vinyl(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return 'üå† –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–ª–∞—Å—Ç–∏–Ω–∫–∏'
        case LangTypes.EN:
            return 'üå† Subscribe to create new records'


def audio_fail(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '–ê—É–¥–∏–æ –¥–æ–ª–∂–Ω–æ –¥–ª–∏—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã!'
        case LangTypes.EN:
            return 'Audio must be at least 3 seconds long!'


def create_vinyl_template(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω –ø–ª–∞—Å—Ç–∏–Ω–∫–∏'
        case LangTypes.EN:
            return 'Nice! Now choose vinyl template'


def create_vinyl_cover(lang: LangTypes, template: int) -> str:
    match lang:
        case LangTypes.RU:
            return f'–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω ‚Ññ{template}\n–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–∞ –æ–±–ª–æ–∂–∫—É'
        case LangTypes.EN:
            return f'Template ‚Ññ{template} chosen\nNow send me image or video for cover'


def cover_failure(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–æ —Å–∂–∞—Ç–∏–µ–º –∏–ª–∏ –≤–∏–¥–µ–æ'
        case LangTypes.EN:
            return 'Please, send compressed photo or video'


def create_vinyl_noise(lang: LangTypes, cover_type: int) -> str:
    match lang:
        case LangTypes.RU:
            cover_type = '—Ñ–æ—Ç–æ' if cover_type == 1 else '–≤–∏–¥–µ–æ'
            return f'–ü–æ–ª—É—á–∏–ª {cover_type}-–æ–±–ª–æ–∂–∫—É\n–î–æ–±–∞–≤–∏—Ç—å —à—É–º –≤–∏–Ω–∏–ª–∞ –Ω–∞ —Ñ–æ–Ω?'
        case LangTypes.EN:
            cover_type = 'photo' if cover_type == 1 else 'video'
            return f'Got {cover_type} cover\nDo we add vinyl noise?'


def create_vinyl_speed(lang: LangTypes, noise: bool) -> str:
    match lang:
        case LangTypes.RU:
            return f'–î–æ–±–∞–≤–ª—è–µ–º —à—É–º: {"–î–∞" if noise else "–ù–µ—Ç"}\n–í—ã–±–µ—Ä–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è –¥–∏—Å–∫–∞'
        case LangTypes.EN:
            return f'Adding noise: {"Yes" if noise else "No"}\nChoose rotation speed'


def create_vinyl_offset(lang: LangTypes, speed: str) -> str:
    match lang:
        case LangTypes.RU:
            return (
                f'–°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è: {speed}\n'
                '–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                '02:30 (–¥–≤–µ –º–∏–Ω—É—Ç—ã 30 —Å–µ–∫—É–Ω–¥)'
            )
        case LangTypes.EN:
            return (
                f'Rotation Speed: {speed}\n'
                'Enter offset time in format:\n'
                '02:30 (2 minutes 30 seconds)'
            )


def create_vinyl_approve(lang: LangTypes, data: dict) -> str:
    match lang:
        case LangTypes.RU:
            return (
                f'–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {data["template"]}\n'
                f'–®—É–º –≤–∏–Ω–∏–ª–∞: {"‚úÖ" if data["noise"] else "‚ùå"}\n'
                f'–°–∫–æ—Ä–æ—Å—Ç—å: {"–ü–æ–ª–Ω—ã–π –æ–±–æ—Ä–æ—Ç" if data["speed"] else "8RPM"}\n'
                f'–ù–∞—á–∞–ª–æ —Ç—Ä–µ–∫–∞: {data["offset"]}\n\n'
                '–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Å—Ç–∏–Ω–∫—É —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?'
            )
        case LangTypes.EN:
            return (
                f'Template number: {data["template"]}\n'
                f'Vinyl noise: {"‚úÖ" if data["noise"] else "‚ùå"}\n'
                f'Speed: {"Full turn" if data["speed"] else "8RPM"}\n'
                f'Offset: {data["offset"]}\n\n'
                'Create vinyl record with the settings?'
            )


def wrong_format(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!'
        case LangTypes.EN:
            return 'Invalid format!'