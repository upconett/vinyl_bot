from aiogram.types import User as AIOgramUser

from database.models.User import LangTypes
from database.dataclasses import ProfileData


def start(lang: LangTypes, user: AIOgramUser) -> str:
    match lang:
        case LangTypes.RU:
            return (
                f'–ü—Ä–∏–≤–µ—Ç, {user.first_name} üëë\n'
                '–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å '
                '–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –º—É–∑—ã–∫–∏ –≤ –≤–∏–¥–µ –∫—Ä—É–∂–∫–∞ —Å '
                '–ø–ª–∞—Å—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∞–ª—å–±–æ–º!'
            )
        case LangTypes.EN:
            return (
                f'Hello, {user.first_name} üëë\n'
                'With this bot you can create '
                'a video message of vinyl record '
                'or an album with your image!'
            )


def stats(lang: LangTypes, data: dict) -> str:
    match lang:
        case LangTypes.RU:
            return (
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n\n'
                f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data["users_total"]}\n'
                f'–ê–∫—Ç–∏–≤–Ω—ã—Ö: {data["users_active"]}\n'
                f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: {data["users_blocked"]}\n\n'
                f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {data["users_today"]}\n'
                f'–û–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {sum((data["sub_today_month"], data["sub_today_6month"], data["sub_today_12month"]))}\n'
                f'–ù–∞ 1 –º–µ—Å: {data["sub_today_month"]}\n'
                f'–ù–∞ 6 –º–µ—Å: {data["sub_today_6month"]}\n'
                f'–ù–∞ 12 –º–µ—Å: {data["sub_today_12month"]}\n\n'
                f'–í—Å–µ–≥–æ –û–ø–ª–∞—Ç–∏–ª–∏: {sum((data["sub_month"], data["sub_6month"], data["sub_12month"]))}\n'
                f'–ù–∞ 1 –º–µ—Å: {data["sub_month"]}\n'
                f'–ù–∞ 6 –º–µ—Å: {data["sub_6month"]}\n'
                f'–ù–∞ 12 –º–µ—Å: {data["sub_12month"]}\n\n'

                # '–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —à–∞–±–ª–æ–Ω–æ–≤:\n'
                # '/add_image_vinyl\n'
                # '/add_image_player\n'
                # '/add_image_album\n\n'
                '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:\n'
                '/announce\n'
            )
        case LangTypes.EN:
            return (
                'Bot Activity Statistics\n\n'
                f'Total users: {data["users_total"]}\n'
                f'Active: {data["users_active"]}\n'
                f'Blocked: {data["users_blocked"]}\n\n'
                f'Joined today: {data["users_today"]}\n'
                f'Subscriptions paid today: {sum((data["sub_today_month"], data["sub_today_6month"], data["sub_today_12month"]))}\n'
                f'For 1 month: {data["sub_today_month"]}\n'
                f'For 6 months: {data["sub_today_6month"]}\n'
                f'For 12 months: {data["sub_today_12month"]}\n\n'
                f'Total Subscriptions Paid: {sum((data["sub_month"], data["sub_6month"], data["sub_12month"]))}\n'
                f'For 1 month: {data["sub_month"]}\n'
                f'For 6 months: {data["sub_6month"]}\n'
                f'For 12 months: {data["sub_12month"]}\n\n'
                # 'You can change image of templates:\n'
                # '/add_image_vinyl\n'
                # '/add_image_player\n'
                # '/add_image_album\n\n'
                'You can make announcement:\n'
                '/announce\n'
            )



def announcement_help(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return (
                '–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É **–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º** –±–æ—Ç–∞\n\n'
                '**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ\:**\n'
                '\/announce\n'
                '–í–∞—à–µ *—Å–æ–æ–æ–±—â–µ–Ω–∏–µ* —Å ||–ª—é–±—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º|| –∑–¥–µ—Å—å\.\.\.'
            )
        case LangTypes.EN:
            return (
                'Using this command you can send announcement to **each user** of the bot\n\n'
                '**Usage\:**\n'
                '\/announce\n'
                'Your *message* with ||any formatting|| here\.\.\.'
            )


def announcement_approve_1(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:'
        case LangTypes.EN:
            return 'Your message will look like that:'


def announcement_approve_2(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '*–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\?*'
        case LangTypes.EN:
            return '*Start Announcement\?*'


def vinyl_template(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '–ö–∞—Ä—Ç–∏–Ω–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–ª–∞—Å—Ç–∏–Ω–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ'
        case LangTypes.EN:
            return 'Vinyl templates picture changed ‚úÖ'


def album_template(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '–ö–∞—Ä—Ç–∏–Ω–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∞–ª—å–±–æ–º–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ'
        case LangTypes.EN:
            return 'Album templates picture changed ‚úÖ'

            
def player_template(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return '–ö–∞—Ä—Ç–∏–Ω–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω–∞ ‚úÖ'
        case LangTypes.EN:
            return 'Players templates picture changed ‚úÖ'


def add_image_help(lang: LangTypes, command: str) -> str:
    match lang:
        case LangTypes.RU:
            return f'–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é `{command}` —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω'
        case LangTypes.EN:
            return f'Send me image with `{command}` as caption to change template' 


def announce_start(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return f'üì© –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...'
        case LangTypes.EN:
            return f'üì© Start sending announcements to everyone...'


def announce_end(lang: LangTypes) -> str:
    match lang:
        case LangTypes.RU:
            return f'–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ'
        case LangTypes.EN:
            return f'Announcement ended successfully ‚úÖ'
